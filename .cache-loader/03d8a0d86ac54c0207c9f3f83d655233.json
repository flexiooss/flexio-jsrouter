{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jshelpers/src/EventHandler/EventHandlerBase.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jshelpers/src/EventHandler/EventHandlerBase.js","mtime":1549893082326},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["'use strict';\n\nimport { isBoolean } from '../is';\nimport { assert } from '../assert';\nimport { UID } from '../uid';\nimport { Sequence } from '../Sequence';\nimport { EventListenerParam } from './EventListenerParam';\n\nvar _isDispatching_ = Symbol('_isDispatching_');\n\nvar _sequenceId_ = Symbol('_sequenceId_');\n/**\n * @class\n * @abstract\n */\n\n\nexport class EventHandlerBase {\n  constructor() {\n    /**\n     *\n     * @type {Map<String|Symbol, Map<String|Symbol, CallableFunction >>}\n     * @protected\n     */\n    this._listeners = new Map();\n    this._pendingPayload = new Map();\n    /**\n     *\n     * @type {Set<string|Symbol>}\n     * @protected\n     */\n\n    this._isHandled = new Set();\n    /**\n     *\n     * @type {Set<String|Symbol>}\n     * @protected\n     */\n\n    this._isPending = new Set();\n    this[_sequenceId_] = new Sequence(UID());\n    /**\n     * @property {boolean}\n     * @name EventHandlerBase#Symbol(_isDispatching_)\n     * @private\n     */\n\n    var _isDispatching = false;\n    Object.defineProperty(this, _isDispatching_, {\n      enumerable: false,\n      configurable: false,\n      get: () => _isDispatching,\n      set: v => {\n        assert(isBoolean(v), '_isDispatching argument should be a Boolean');\n        _isDispatching = v;\n      }\n    });\n  }\n  /**\n   *\n   * @param {String|Symbol} event\n   * @param {Object} payload\n   */\n\n\n  dispatch(event, payload) {\n    if (this._listeners.has(event)) {\n      this._beforeDispatch(event, payload);\n\n      try {\n        this._listeners.get(event).forEach((v, k) => {\n          if (!this._isPending.has(k)) {\n            this._invokeCallback(event, k);\n          }\n        });\n      } finally {\n        this._stopDispatching(event);\n      }\n    }\n  }\n  /**\n   *\n   * @param {string|Symbol} event\n   * @protected\n   */\n\n\n  _ensureHaveListenersMap(event) {\n    if (!this._listeners.has(event)) {\n      this._listeners.set(event, new Map());\n    }\n  }\n  /**\n   *\n   * @protected\n   * @param {String|Symbol} event of Listener\n   * @param {String|Symbol} token of Listener\n   */\n\n\n  _invokeCallback(event, token) {\n    this._isPending.add(token);\n\n    try {\n      this._listeners.get(event).get(token).callback(this._pendingPayload.get(event), event);\n    } finally {\n      this._isHandled.add(token);\n    }\n  }\n  /**\n   *\n   * @return {string}\n   */\n\n\n  nextID() {\n    return this[_sequenceId_].nextID();\n  }\n  /**\n   *\n   * @param {EventListenerParam} eventListenerParam\n   * @returns {String} token\n   */\n\n\n  addEventListener(eventListenerParam) {\n    assert(eventListenerParam instanceof EventListenerParam, 'EventHandlerBase:addEventListener: ̀`eventListenerParam` argument assert be an instance of EventListenerParam');\n\n    this._ensureHaveListenersMap(eventListenerParam.event);\n\n    var id = this.nextID();\n\n    this._listeners.get(eventListenerParam.event).set(id, {\n      callback: eventListenerParam.callback\n    });\n\n    return id;\n  }\n  /**\n   *\n   * @param {String|Symbol} event of Listener\n   * @param {String} token\n   * @throws AssertionError\n   */\n\n\n  removeEventListener(event, token) {\n    if (this._listeners.has(event)) {\n      assert(this._listeners.get(event).has(token), 'EventHandlerBase:removeEventListener: ̀`id` argument not in _listeners : `%s`', event);\n\n      this._listeners.get(event).delete(token);\n    }\n  }\n  /**\n   *\n   * @param {String|Symbol} event of Listener\n   * @param {String} token\n   * @returns {boolean}\n   */\n\n\n  hasEventListener(event, token) {\n    return this._listeners.has(event) && this._listeners.get(event).has(token);\n  }\n  /**\n   *\n   * @param {String|Symbol} event of Listener\n   * @param {Object} payload\n   * @private\n   */\n\n\n  _beforeDispatch(event, payload) {\n    this._listeners.get(event).forEach((v, k) => {\n      this._isHandled.delete(k);\n    });\n\n    this._pendingPayload.set(event, payload);\n\n    this[_isDispatching_] = true;\n  }\n  /**\n   *\n   * @param {string|Symbol} event\n   * @protected\n   */\n\n\n  _stopDispatching(event) {\n    this._listeners.get(event).forEach((v, k) => {\n      this._isPending.delete(k);\n    });\n\n    this._pendingPayload.delete(event);\n\n    this[_isDispatching_] = false;\n  }\n  /**\n   *\n   * @return {boolean}\n   */\n\n\n  isDispatching() {\n    return this[_isDispatching_];\n  }\n\n}",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jshelpers/src/EventHandler/EventHandlerBase.js"],"names":["isBoolean","assert","UID","Sequence","EventListenerParam","_isDispatching_","Symbol","_sequenceId_","EventHandlerBase","constructor","_listeners","Map","_pendingPayload","_isHandled","Set","_isPending","_isDispatching","Object","defineProperty","enumerable","configurable","get","set","v","dispatch","event","payload","has","_beforeDispatch","forEach","k","_invokeCallback","_stopDispatching","_ensureHaveListenersMap","token","add","callback","nextID","addEventListener","eventListenerParam","id","removeEventListener","delete","hasEventListener","isDispatching"],"mappings":"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","sourcesContent":["'use strict'\nimport {isBoolean} from '../is'\nimport {assert} from '../assert'\nimport {UID} from '../uid'\nimport {Sequence} from '../Sequence'\nimport {EventListenerParam} from './EventListenerParam'\n\nconst _isDispatching_ = Symbol('_isDispatching_')\nconst _sequenceId_ = Symbol('_sequenceId_')\n\n/**\n * @class\n * @abstract\n */\nexport class EventHandlerBase {\n  constructor() {\n    /**\n     *\n     * @type {Map<String|Symbol, Map<String|Symbol, CallableFunction >>}\n     * @protected\n     */\n    this._listeners = new Map()\n\n    this._pendingPayload = new Map()\n    /**\n     *\n     * @type {Set<string|Symbol>}\n     * @protected\n     */\n    this._isHandled = new Set()\n    /**\n     *\n     * @type {Set<String|Symbol>}\n     * @protected\n     */\n    this._isPending = new Set()\n    this[_sequenceId_] = new Sequence(UID())\n\n    /**\n     * @property {boolean}\n     * @name EventHandlerBase#Symbol(_isDispatching_)\n     * @private\n     */\n    let _isDispatching = false\n    Object.defineProperty(this,\n      _isDispatching_,\n      {\n        enumerable: false,\n        configurable: false,\n        get: () => _isDispatching,\n        set: (v) => {\n          assert(isBoolean(v),\n            '_isDispatching argument should be a Boolean'\n          )\n          _isDispatching = v\n        }\n      })\n  }\n\n  /**\n   *\n   * @param {String|Symbol} event\n   * @param {Object} payload\n   */\n  dispatch(event, payload) {\n    if (this._listeners.has(event)) {\n      this._beforeDispatch(event, payload)\n      try {\n        this._listeners.get(event).forEach((v, k) => {\n          if (!this._isPending.has(k)) {\n            this._invokeCallback(event, k)\n          }\n        })\n      } finally {\n        this._stopDispatching(event)\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {string|Symbol} event\n   * @protected\n   */\n  _ensureHaveListenersMap(event) {\n    if (!(this._listeners.has(event))) {\n      this._listeners.set(event, new Map())\n    }\n  }\n\n  /**\n   *\n   * @protected\n   * @param {String|Symbol} event of Listener\n   * @param {String|Symbol} token of Listener\n   */\n  _invokeCallback(event, token) {\n    this._isPending.add(token)\n    try {\n      this._listeners.get(event)\n        .get(token)\n        .callback(this._pendingPayload.get(event), event)\n    } finally {\n      this._isHandled.add(token)\n    }\n  }\n\n  /**\n   *\n   * @return {string}\n   */\n  nextID() {\n    return this[_sequenceId_].nextID()\n  }\n\n  /**\n   *\n   * @param {EventListenerParam} eventListenerParam\n   * @returns {String} token\n   */\n  addEventListener(eventListenerParam) {\n    assert(eventListenerParam instanceof EventListenerParam,\n      'EventHandlerBase:addEventListener: ̀`eventListenerParam` argument assert be an instance of EventListenerParam'\n    )\n\n    this._ensureHaveListenersMap(eventListenerParam.event)\n    const id = this.nextID()\n\n    this._listeners.get(eventListenerParam.event)\n      .set(id, {\n        callback: eventListenerParam.callback\n      })\n\n    return id\n  }\n\n  /**\n   *\n   * @param {String|Symbol} event of Listener\n   * @param {String} token\n   * @throws AssertionError\n   */\n  removeEventListener(event, token) {\n    if (this._listeners.has(event)) {\n      assert(this._listeners.get(event).has(token),\n        'EventHandlerBase:removeEventListener: ̀`id` argument not in _listeners : `%s`',\n        event\n      )\n      this._listeners.get(event).delete(token)\n    }\n  }\n\n  /**\n   *\n   * @param {String|Symbol} event of Listener\n   * @param {String} token\n   * @returns {boolean}\n   */\n  hasEventListener(event, token) {\n    return (this._listeners.has(event)) && (this._listeners.get(event).has(token))\n  }\n\n  /**\n   *\n   * @param {String|Symbol} event of Listener\n   * @param {Object} payload\n   * @private\n   */\n  _beforeDispatch(event, payload) {\n    this._listeners.get(event).forEach((v, k) => {\n      this._isHandled.delete(k)\n    })\n    this._pendingPayload.set(event, payload)\n    this[_isDispatching_] = true\n  }\n\n  /**\n   *\n   * @param {string|Symbol} event\n   * @protected\n   */\n  _stopDispatching(event) {\n    this._listeners.get(event).forEach((v, k) => {\n      this._isPending.delete(k)\n    })\n    this._pendingPayload.delete(event)\n    this[_isDispatching_] = false\n  }\n\n  /**\n   *\n   * @return {boolean}\n   */\n  isDispatching() {\n    return this[_isDispatching_]\n  }\n}\n"]}]}