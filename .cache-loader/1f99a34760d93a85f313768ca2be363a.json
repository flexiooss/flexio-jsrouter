{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jshelpers/src/assert.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jshelpers/src/assert.js","mtime":1547723597462},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["class AssertionError extends Error {\n  constructor() {\n    super(...arguments);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AssertionError);\n    }\n\n    this.name = 'AssertionError';\n    this.date = new Date();\n  }\n\n}\n/**\n * Throw an Error if assertion not equal to true, NODE_ENV = test | development\n * @param {boolean} assert\n * @param {string} message %s will be replaced by messageArgs\n * @param {...string} messageArgs\n * @function\n * @throws AssertionError\n */\n\n\nexport var assert = process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development' ? function (assert, message) {\n  for (var _len = arguments.length, messageArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    messageArgs[_key - 2] = arguments[_key];\n  }\n\n  if (message === undefined) {\n    throw new Error('`assert` function require an error message argument');\n  }\n\n  if (!(typeof assert === 'function' ? assert() : assert)) {\n    var ArgIndex = 0;\n    throw new AssertionError(message.replace(/%s/g, () => messageArgs[ArgIndex++]));\n  }\n} : () => {};",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jshelpers/src/assert.js"],"names":["AssertionError","Error","constructor","captureStackTrace","name","date","Date","assert","process","env","NODE_ENV","message","messageArgs","undefined","ArgIndex","replace"],"mappings":"AAAA,MAAMA,cAAN,SAA6BC,KAA7B,CAAmC;AACjCC,EAAAA,WAAW,GAAY;AACrB,UAAM,YAAN;;AACA,QAAID,KAAK,CAACE,iBAAV,EAA6B;AAC3BF,MAAAA,KAAK,CAACE,iBAAN,CAAwB,IAAxB,EAA8BH,cAA9B;AACD;;AACD,SAAKI,IAAL,GAAY,gBAAZ;AACA,SAAKC,IAAL,GAAY,IAAIC,IAAJ,EAAZ;AACD;;AARgC;AAWnC;;;;;;;;;;AAQA,OAAO,IAAMC,MAAM,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,IAAmCF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7D,GAA8E,UAACH,MAAD,EAASI,OAAT,EAAqC;AAAA,oCAAhBC,WAAgB;AAAhBA,IAAAA,WAAgB;AAAA;;AACvI,MAAID,OAAO,KAAKE,SAAhB,EAA2B;AACzB,UAAM,IAAIZ,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,MAAI,EAAG,OAAOM,MAAP,KAAkB,UAAnB,GAAiCA,MAAM,EAAvC,GAA4CA,MAA9C,CAAJ,EAA2D;AACzD,QAAIO,QAAQ,GAAG,CAAf;AACA,UAAM,IAAId,cAAJ,CACJW,OAAO,CAACI,OAAR,CAAgB,KAAhB,EAAuB,MACrBH,WAAW,CAACE,QAAQ,EAAT,CADb,CADI,CAAN;AAKD;AACF,CAZqB,GAYlB,MAAM,CACT,CAbM","sourcesContent":["class AssertionError extends Error {\n  constructor(...params) {\n    super(...params)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AssertionError)\n    }\n    this.name = 'AssertionError'\n    this.date = new Date()\n  }\n}\n\n/**\n * Throw an Error if assertion not equal to true, NODE_ENV = test | development\n * @param {boolean} assert\n * @param {string} message %s will be replaced by messageArgs\n * @param {...string} messageArgs\n * @function\n * @throws AssertionError\n */\nexport const assert = (process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development') ? (assert, message, ...messageArgs) => {\n  if (message === undefined) {\n    throw new Error('`assert` function require an error message argument')\n  }\n  if (!((typeof assert === 'function') ? assert() : assert)) {\n    var ArgIndex = 0\n    throw new AssertionError(\n      message.replace(/%s/g, () =>\n        messageArgs[ArgIndex++]\n      )\n    )\n  }\n} : () => {\n}\n"]}]}