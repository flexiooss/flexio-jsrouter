{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jshelpers/src/stringHelpers.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jshelpers/src/stringHelpers.js","mtime":1547723597462},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["export var firstUppercase = word => {\n  var res = word.toLowerCase();\n  return res[0].toUpperCase() + res.slice(1);\n};\nexport var camelCase = function camelCase(word) {\n  var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n  var firstUpper = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var words = word.split(sep);\n  var res = '';\n  var i = 0;\n  var countOfWords = words.length;\n\n  if (!firstUpper) {\n    res += word[0].toLowerCase();\n    i = 1;\n  }\n\n  for (i; i < countOfWords; i++) {\n    res += firstUppercase(words[i]);\n  }\n\n  return res;\n};\nexport var matchAll = (regexp, str) => {\n  var matches = [];\n  str.replace(regexp, function () {\n    var arr = [].slice.call(arguments, 0);\n    var extras = arr.splice(-2);\n    arr.index = extras[0];\n    arr.input = extras[1];\n    matches.push(arr);\n  });\n  return matches.length ? matches : null;\n};\nexport var padLeft = (nr, n, str) => {\n  return Array(n - String(nr).length + 1).join(str || '0') + nr;\n};",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jshelpers/src/stringHelpers.js"],"names":["firstUppercase","word","res","toLowerCase","toUpperCase","slice","camelCase","sep","firstUpper","words","split","i","countOfWords","length","matchAll","regexp","str","matches","replace","arr","call","arguments","extras","splice","index","input","push","padLeft","nr","n","Array","String","join"],"mappings":"AAAA,OAAO,IAAMA,cAAc,GAAIC,IAAD,IAAU;AACtC,MAAIC,GAAG,GAAGD,IAAI,CAACE,WAAL,EAAV;AACA,SAAOD,GAAG,CAAC,CAAD,CAAH,CAAOE,WAAP,KAAuBF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAA9B;AACD,CAHM;AAIP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACL,IAAD,EAAwC;AAAA,MAAjCM,GAAiC,uEAA3B,GAA2B;AAAA,MAAtBC,UAAsB,uEAAT,IAAS;AAC/D,MAAIC,KAAK,GAAGR,IAAI,CAACS,KAAL,CAAWH,GAAX,CAAZ;AACA,MAAIL,GAAG,GAAG,EAAV;AACA,MAAIS,CAAC,GAAG,CAAR;AACA,MAAIC,YAAY,GAAGH,KAAK,CAACI,MAAzB;;AACA,MAAI,CAACL,UAAL,EAAiB;AACfN,IAAAA,GAAG,IAAID,IAAI,CAAC,CAAD,CAAJ,CAAQE,WAAR,EAAP;AACAQ,IAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,OAAKA,CAAL,EAAQA,CAAC,GAAGC,YAAZ,EAA0BD,CAAC,EAA3B,EAA+B;AAC7BT,IAAAA,GAAG,IAAIF,cAAc,CAACS,KAAK,CAACE,CAAD,CAAN,CAArB;AACD;;AACD,SAAOT,GAAP;AACD,CAbM;AAcP,OAAO,IAAMY,QAAQ,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACvC,MAAIC,OAAO,GAAG,EAAd;AACAD,EAAAA,GAAG,CAACE,OAAJ,CAAYH,MAAZ,EAAoB,YAAW;AAC7B,QAAII,GAAG,GAAI,EAAD,CAAKd,KAAL,CAAWe,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAV;AACA,QAAIC,MAAM,GAAGH,GAAG,CAACI,MAAJ,CAAW,CAAC,CAAZ,CAAb;AACAJ,IAAAA,GAAG,CAACK,KAAJ,GAAYF,MAAM,CAAC,CAAD,CAAlB;AACAH,IAAAA,GAAG,CAACM,KAAJ,GAAYH,MAAM,CAAC,CAAD,CAAlB;AACAL,IAAAA,OAAO,CAACS,IAAR,CAAaP,GAAb;AACD,GAND;AAOA,SAAOF,OAAO,CAACJ,MAAR,GAAiBI,OAAjB,GAA2B,IAAlC;AACD,CAVM;AAWP,OAAO,IAAMU,OAAO,GAAG,CAACC,EAAD,EAAKC,CAAL,EAAQb,GAAR,KAAgB;AACnC,SAAOc,KAAK,CAACD,CAAC,GAACE,MAAM,CAACH,EAAD,CAAN,CAAWf,MAAb,GAAoB,CAArB,CAAL,CAA6BmB,IAA7B,CAAkChB,GAAG,IAAE,GAAvC,IAA4CY,EAAnD;AACH,CAFM","sourcesContent":["export const firstUppercase = (word) => {\n  let res = word.toLowerCase()\n  return res[0].toUpperCase() + res.slice(1)\n}\nexport const camelCase = (word, sep = '_', firstUpper = true) => {\n  let words = word.split(sep)\n  let res = ''\n  let i = 0\n  let countOfWords = words.length\n  if (!firstUpper) {\n    res += word[0].toLowerCase()\n    i = 1\n  }\n  for (i; i < countOfWords; i++) {\n    res += firstUppercase(words[i])\n  }\n  return res\n}\nexport const matchAll = (regexp, str) => {\n  var matches = []\n  str.replace(regexp, function() {\n    var arr = ([]).slice.call(arguments, 0)\n    var extras = arr.splice(-2)\n    arr.index = extras[0]\n    arr.input = extras[1]\n    matches.push(arr)\n  })\n  return matches.length ? matches : null\n}\nexport const padLeft = (nr, n, str) => {\n    return Array(n-String(nr).length+1).join(str||'0')+nr;\n}"]}]}