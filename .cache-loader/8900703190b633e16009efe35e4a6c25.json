{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jsrouter/src/__tests__/TestUrlTemplateRegexp.test.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/src/__tests__/TestUrlTemplateRegexp.test.js","mtime":1549956382000},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["/* global runTest */\nimport { TestCase } from 'code-altimeter-js';\nimport { UrlTemplateRegexp } from '../TemplateUrl/UrlTemplateRegexp';\n\nvar assert = require('assert');\n/**\n * @extends TestCase\n */\n\n\nexport class TestUrlTemplateRegexpTest extends TestCase {\n  testTemplateToRegexp() {\n    var urlTemplate = 'page/{category}/{pageId}';\n    var re = UrlTemplateRegexp.regexpFromUrlTemplate(urlTemplate);\n    var url = 'page/bobo/7/';\n    var matches = re.exec(url);\n    assert.strictEqual(matches.groups.category, 'bobo', 'should retrieve first url parameters');\n    assert.strictEqual(matches.groups.pageId, '7', 'should retrieve 2nd url parameters');\n  }\n\n  testTemplateToUrl() {\n    var urlTemplate = 'page/{category}/{pageId}';\n    var url = UrlTemplateRegexp.UrlFromUrlTemplate(urlTemplate, {\n      category: 'bobo',\n      pageId: 7\n    });\n    var expectedUrl = 'page/bobo/7';\n    assert.strictEqual(url, expectedUrl, 'should retrieve url with parameters');\n  }\n\n}\nrunTest(TestUrlTemplateRegexpTest);",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jsrouter/src/__tests__/TestUrlTemplateRegexp.test.js"],"names":["TestCase","UrlTemplateRegexp","assert","require","TestUrlTemplateRegexpTest","testTemplateToRegexp","urlTemplate","re","regexpFromUrlTemplate","url","matches","exec","strictEqual","groups","category","pageId","testTemplateToUrl","UrlFromUrlTemplate","expectedUrl","runTest"],"mappings":"AAAA;AACA,SAAQA,QAAR,QAAuB,mBAAvB;AACA,SAAQC,iBAAR,QAAgC,kCAAhC;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;;AAGA,OAAO,MAAMC,yBAAN,SAAwCJ,QAAxC,CAAiD;AACtDK,EAAAA,oBAAoB,GAAG;AACrB,QAAMC,WAAW,GAAG,0BAApB;AACA,QAAMC,EAAE,GAAGN,iBAAiB,CAACO,qBAAlB,CAAwCF,WAAxC,CAAX;AACA,QAAMG,GAAG,GAAG,cAAZ;AACA,QAAMC,OAAO,GAAGH,EAAE,CAACI,IAAH,CAAQF,GAAR,CAAhB;AAEAP,IAAAA,MAAM,CAACU,WAAP,CACEF,OAAO,CAACG,MAAR,CAAeC,QADjB,EAEE,MAFF,EAGE,sCAHF;AAKAZ,IAAAA,MAAM,CAACU,WAAP,CACEF,OAAO,CAACG,MAAR,CAAeE,MADjB,EAEE,GAFF,EAGE,oCAHF;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAMV,WAAW,GAAG,0BAApB;AACA,QAAMG,GAAG,GAAGR,iBAAiB,CAACgB,kBAAlB,CAAqCX,WAArC,EAAkD;AAACQ,MAAAA,QAAQ,EAAE,MAAX;AAAmBC,MAAAA,MAAM,EAAE;AAA3B,KAAlD,CAAZ;AACA,QAAMG,WAAW,GAAG,aAApB;AAEAhB,IAAAA,MAAM,CAACU,WAAP,CACEH,GADF,EAEES,WAFF,EAGE,qCAHF;AAKD;;AA7BqD;AAgCxDC,OAAO,CAACf,yBAAD,CAAP","sourcesContent":["/* global runTest */\nimport {TestCase} from 'code-altimeter-js'\nimport {UrlTemplateRegexp} from '../TemplateUrl/UrlTemplateRegexp'\n\nconst assert = require('assert')\n\n/**\n * @extends TestCase\n */\nexport class TestUrlTemplateRegexpTest extends TestCase {\n  testTemplateToRegexp() {\n    const urlTemplate = 'page/{category}/{pageId}'\n    const re = UrlTemplateRegexp.regexpFromUrlTemplate(urlTemplate)\n    const url = 'page/bobo/7/'\n    const matches = re.exec(url)\n\n    assert.strictEqual(\n      matches.groups.category,\n      'bobo',\n      'should retrieve first url parameters'\n    )\n    assert.strictEqual(\n      matches.groups.pageId,\n      '7',\n      'should retrieve 2nd url parameters'\n    )\n  }\n\n  testTemplateToUrl() {\n    const urlTemplate = 'page/{category}/{pageId}'\n    const url = UrlTemplateRegexp.UrlFromUrlTemplate(urlTemplate, {category: 'bobo', pageId: 7})\n    const expectedUrl = 'page/bobo/7'\n\n    assert.strictEqual(\n      url,\n      expectedUrl,\n      'should retrieve url with parameters'\n    )\n  }\n}\n\nrunTest(TestUrlTemplateRegexpTest)\n"]}]}