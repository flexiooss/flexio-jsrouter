{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jshelpers/src/types/FlexDate.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jshelpers/src/types/FlexDate.js","mtime":1547723597462},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["import { padLeft } from \"../stringHelpers\";\nvar datetimePattern = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d*))?(Z)?$/;\nvar zonedDatetimePattern = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d*))?(Z)?([+-](\\d{2}):(\\d{2}?))?$/;\nvar datePattern = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nvar timePattern = /^(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d*))?(Z)?/;\n\nclass FlexZonedDateTime {\n  constructor(dateStr) {\n    var found = dateStr.match(zonedDatetimePattern);\n\n    if (found == null) {\n      throw \"Invalid tz datetime format: \" + dateStr;\n    } else {\n      this.date = new Date();\n      this.date.setFullYear(found[1]);\n      this.date.setMonth(found[2] - 1);\n      this.date.setDate(found[3]);\n      this.date.setHours(found[4]);\n      this.date.setMinutes(found[5]);\n      this.date.setSeconds(found[6]);\n      this.date.setMilliseconds(found[8] || 0);\n      var minutes = this.date.getMinutes() - this.date.getTimezoneOffset();\n      this.tzHours = parseInt(found[11]) || 0;\n      this.tzMinutes = parseInt(found[12]) || 0;\n      this.offsetMinutes = this.tzHours * 60 + this.tzMinutes;\n\n      if (found[10]) {\n        if (found[10].startsWith(\"-\")) {\n          this.offsetMinutes = -this.offsetMinutes;\n        }\n\n        minutes = minutes - this.offsetMinutes;\n      }\n\n      this.date.setMinutes(minutes); // convert to UTC date\n    }\n  }\n\n  toJSON() {\n    var convertedDate = new Date(this.date.getTime()); // reconvert to inittial timezone\n\n    convertedDate.setUTCMinutes(convertedDate.getMinutes() + this.offsetMinutes);\n    var timezone;\n\n    if (this.offsetMinutes < 0) {\n      timezone = \"-\";\n    } else {\n      timezone = \"+\";\n    }\n\n    timezone = timezone + padLeft(this.tzHours, 2) + \":\" + padLeft(this.tzMinutes, 2);\n\n    if (convertedDate.getMilliseconds() !== 0) {\n      return `${convertedDate.getUTCFullYear()}-${padLeft(convertedDate.getUTCMonth() + 1, 2)}-${padLeft(convertedDate.getUTCDate(), 2)}T${padLeft(convertedDate.getUTCHours(), 2)}:${padLeft(convertedDate.getUTCMinutes(), 2)}:${padLeft(convertedDate.getUTCSeconds(), 2)}.${convertedDate.getUTCMilliseconds()}${timezone}`;\n    } else {\n      return `${convertedDate.getUTCFullYear()}-${padLeft(convertedDate.getUTCMonth() + 1, 2)}-${padLeft(convertedDate.getUTCDate(), 2)}T${padLeft(convertedDate.getUTCHours(), 2)}:${padLeft(convertedDate.getUTCMinutes(), 2)}:${padLeft(convertedDate.getUTCSeconds(), 2)}${timezone}`;\n    }\n  }\n\n}\n\nclass FlexDateTime {\n  constructor(dateStr) {\n    var found = dateStr.match(datetimePattern);\n\n    if (found == null) {\n      throw \"Invalid datetime format: \" + dateStr;\n    } else {\n      this.date = new Date();\n      this.date.setFullYear(found[1]);\n      this.date.setMonth(found[2] - 1);\n      this.date.setDate(found[3]);\n      this.date.setHours(found[4]);\n      this.date.setMinutes(found[5]);\n      this.date.setSeconds(found[6]);\n      this.date.setMilliseconds(found[8] || 0);\n      this.date.setMinutes(this.date.getMinutes() - this.date.getTimezoneOffset()); // convert to UTC date\n    }\n  }\n\n  toJSON() {\n    if (this.date.getMilliseconds() !== 0) {\n      return `${this.date.getUTCFullYear()}-${padLeft(this.date.getUTCMonth() + 1, 2)}-${padLeft(this.date.getUTCDate(), 2)}T${padLeft(this.date.getUTCHours(), 2)}:${padLeft(this.date.getUTCMinutes(), 2)}:${padLeft(this.date.getUTCSeconds(), 2)}.${this.date.getUTCMilliseconds()}`;\n    } else {\n      return `${this.date.getUTCFullYear()}-${padLeft(this.date.getUTCMonth() + 1, 2)}-${padLeft(this.date.getUTCDate(), 2)}T${padLeft(this.date.getUTCHours(), 2)}:${padLeft(this.date.getUTCMinutes(), 2)}:${padLeft(this.date.getUTCSeconds(), 2)}`;\n    }\n  }\n\n}\n\nclass FlexDate {\n  constructor(dateStr) {\n    var found = dateStr.match(datePattern);\n\n    if (found == null) {\n      throw \"Invalid date format: \" + dateStr;\n    } else {\n      this.date = new Date();\n      this.date.setDate(found[3]);\n      this.date.setMonth(found[2] - 1);\n      this.date.setFullYear(found[1]);\n    }\n  }\n\n  toJSON() {\n    return `${this.date.getUTCFullYear()}-${padLeft(this.date.getUTCMonth() + 1, 2)}-${padLeft(this.date.getUTCDate(), 2)}`;\n  }\n\n}\n\nclass FlexTime {\n  constructor(dateStr) {\n    var found = dateStr.match(timePattern);\n\n    if (found == null) {\n      throw \"Invalid time format: \" + dateStr;\n    } else {\n      this.date = new Date();\n      this.date.setHours(found[1]);\n      this.date.setMinutes(found[2]);\n      this.date.setSeconds(found[3]);\n      this.date.setMilliseconds(found[5] || 0);\n      this.date.setMinutes(this.date.getMinutes() - this.date.getTimezoneOffset()); // convert to UTC date\n    }\n  }\n\n  toJSON() {\n    if (this.date.getMilliseconds() !== 0) {\n      return `${padLeft(this.date.getUTCHours(), 2)}:${padLeft(this.date.getUTCMinutes(), 2)}:${padLeft(this.date.getUTCSeconds(), 2)}.${this.date.getUTCMilliseconds()}`;\n    } else {\n      return `${padLeft(this.date.getUTCHours(), 2)}:${padLeft(this.date.getUTCMinutes(), 2)}:${padLeft(this.date.getUTCSeconds(), 2)}`;\n    }\n  }\n\n}\n\nexport { FlexDate };\nexport { FlexDateTime };\nexport { FlexTime };\nexport { FlexZonedDateTime };",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jshelpers/src/types/FlexDate.js"],"names":["padLeft","datetimePattern","zonedDatetimePattern","datePattern","timePattern","FlexZonedDateTime","constructor","dateStr","found","match","date","Date","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","setMilliseconds","minutes","getMinutes","getTimezoneOffset","tzHours","parseInt","tzMinutes","offsetMinutes","startsWith","toJSON","convertedDate","getTime","setUTCMinutes","timezone","getMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","FlexDateTime","FlexDate","FlexTime"],"mappings":"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","sourcesContent":["import {padLeft} from \"../stringHelpers\"\n\nconst datetimePattern = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d*))?(Z)?$/;\nconst zonedDatetimePattern = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d*))?(Z)?([+-](\\d{2}):(\\d{2}?))?$/;\nconst datePattern = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst timePattern = /^(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d*))?(Z)?/;\n\n\nclass FlexZonedDateTime {\n    constructor( dateStr ){\n        var found = dateStr.match( zonedDatetimePattern );\n        if( found == null ){\n            throw \"Invalid tz datetime format: \" + dateStr;\n        } else {\n            this.date = new Date();\n            this.date.setFullYear( found[1] );\n            this.date.setMonth( found[2] - 1 );\n            this.date.setDate( found[3] );\n            this.date.setHours( found[4] );\n            this.date.setMinutes( found[5] );\n            this.date.setSeconds( found[6] );\n            this.date.setMilliseconds( found[8] || 0 );\n            let minutes = this.date.getMinutes() - this.date.getTimezoneOffset();\n            this.tzHours = (parseInt( found[11] ) || 0);\n            this.tzMinutes = (parseInt( found[12] ) || 0);\n            this.offsetMinutes = this.tzHours * 60 + this.tzMinutes;\n            if( found[10] ){\n                if( found[10].startsWith( \"-\" ) ){\n                    this.offsetMinutes = -this.offsetMinutes;\n                }\n                minutes = minutes - this.offsetMinutes;\n            }\n            this.date.setMinutes( minutes ); // convert to UTC date\n        }\n    }\n\n    toJSON(){\n        var convertedDate = new Date( this.date.getTime() ); // reconvert to inittial timezone\n        convertedDate.setUTCMinutes( convertedDate.getMinutes() + this.offsetMinutes );\n        var timezone;\n        if( this.offsetMinutes < 0 ){\n            timezone = \"-\"\n        } else {\n            timezone = \"+\"\n        }\n        timezone = timezone + padLeft( this.tzHours, 2 ) + \":\" + padLeft( this.tzMinutes, 2 );\n        if( convertedDate.getMilliseconds() !== 0 ){\n            return `${convertedDate.getUTCFullYear()}-${padLeft( convertedDate.getUTCMonth() + 1, 2 )}-${padLeft( convertedDate.getUTCDate(), 2 )}T${padLeft( convertedDate.getUTCHours(), 2 )}:${padLeft( convertedDate.getUTCMinutes(), 2 )}:${padLeft( convertedDate.getUTCSeconds(), 2 ) }.${convertedDate.getUTCMilliseconds()}${timezone}`;\n        } else {\n            return `${convertedDate.getUTCFullYear()}-${padLeft( convertedDate.getUTCMonth() + 1, 2 )}-${padLeft( convertedDate.getUTCDate(), 2 )}T${padLeft( convertedDate.getUTCHours(), 2 )}:${padLeft( convertedDate.getUTCMinutes(), 2 )}:${padLeft( convertedDate.getUTCSeconds(), 2 )}${timezone}`;\n        }\n    }\n}\n\nclass FlexDateTime {\n    constructor( dateStr ){\n        var found = dateStr.match( datetimePattern );\n        if( found == null ){\n            throw \"Invalid datetime format: \" + dateStr;\n        } else {\n            this.date = new Date();\n            this.date.setFullYear( found[1] );\n            this.date.setMonth( found[2] - 1 );\n            this.date.setDate( found[3] );\n            this.date.setHours( found[4] );\n            this.date.setMinutes( found[5] );\n            this.date.setSeconds( found[6] );\n            this.date.setMilliseconds( found[8] || 0 );\n            this.date.setMinutes( this.date.getMinutes() - this.date.getTimezoneOffset() ); // convert to UTC date\n        }\n    }\n\n    toJSON(){\n        if( this.date.getMilliseconds() !== 0 ){\n            return `${this.date.getUTCFullYear()}-${padLeft( this.date.getUTCMonth() + 1, 2 )}-${padLeft( this.date.getUTCDate(), 2 )}T${padLeft( this.date.getUTCHours(), 2 )}:${padLeft( this.date.getUTCMinutes(), 2 )}:${padLeft( this.date.getUTCSeconds(), 2 ) }.${this.date.getUTCMilliseconds()}`;\n        } else {\n            return `${this.date.getUTCFullYear()}-${padLeft( this.date.getUTCMonth() + 1, 2 )}-${padLeft( this.date.getUTCDate(), 2 )}T${padLeft( this.date.getUTCHours(), 2 )}:${padLeft( this.date.getUTCMinutes(), 2 )}:${padLeft( this.date.getUTCSeconds(), 2 )}`;\n        }\n    }\n}\n\nclass FlexDate {\n    constructor( dateStr ){\n        var found = dateStr.match( datePattern );\n        if( found == null ){\n            throw \"Invalid date format: \" + dateStr;\n        } else {\n            this.date = new Date();\n            this.date.setDate( found[3] );\n            this.date.setMonth( found[2] - 1 );\n            this.date.setFullYear( found[1] );\n        }\n    }\n\n    toJSON(){\n        return `${this.date.getUTCFullYear()}-${padLeft( this.date.getUTCMonth() + 1, 2 )}-${padLeft( this.date.getUTCDate(), 2 )}`;\n    }\n}\n\nclass FlexTime {\n    constructor( dateStr ){\n        var found = dateStr.match( timePattern );\n        if( found == null ){\n            throw \"Invalid time format: \" + dateStr;\n        } else {\n            this.date = new Date();\n            this.date.setHours( found[1] );\n            this.date.setMinutes( found[2] );\n            this.date.setSeconds( found[3] );\n            this.date.setMilliseconds( found[5] || 0 );\n            this.date.setMinutes( this.date.getMinutes() - this.date.getTimezoneOffset() ); // convert to UTC date\n        }\n    }\n\n    toJSON(){\n        if( this.date.getMilliseconds() !== 0 ){\n            return `${padLeft( this.date.getUTCHours(), 2 )}:${padLeft( this.date.getUTCMinutes(), 2 )}:${padLeft( this.date.getUTCSeconds(), 2 ) }.${this.date.getUTCMilliseconds()}`;\n        } else {\n            return `${padLeft( this.date.getUTCHours(), 2 )}:${padLeft( this.date.getUTCMinutes(), 2 )}:${padLeft( this.date.getUTCSeconds(), 2 )}`;\n        }\n    }\n}\n\nexport {FlexDate};\nexport {FlexDateTime};\nexport {FlexTime};\nexport {FlexZonedDateTime};\n"]}]}