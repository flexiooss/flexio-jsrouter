{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/code-altimeter-js/src/TestExecutor/TestSuiteExecutor.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/code-altimeter-js/src/TestExecutor/TestSuiteExecutor.js","mtime":1549265384834},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["var TestError = require('../runner/TestError');\n\nvar _require = require('../constantes'),\n    TEST_METHOD_PREFIX = _require.TEST_METHOD_PREFIX;\n\nvar TestCaseExecutor = require('./TestCaseExecutor');\n\nvar TestSuiteReport = require('../Report/TestSuiteReport');\n\nvar Reporter = require('../Report/Reporter');\n/**\n * @implements TestExecutable\n */\n\n\nclass TestSuiteExecutor {\n  /**\n   *\n   * @param {TestSuite} testSuite\n   * @param {TestRun} runner\n   */\n  constructor(testSuite, runner) {\n    /**\n     *\n     * @type {TestSuite}\n     * @private\n     */\n    this.__testSuite = testSuite;\n    /**\n     *\n     * @type {TestSuiteReport}\n     * @private\n     */\n\n    this.__report = new TestSuiteReport(this.__testSuite.constructor.name);\n    /**\n     *\n     * @type {TestRun}\n     * @private\n     */\n\n    this.__runner = runner;\n  }\n  /**\n   *\n   * @return {TestSuiteReport}\n   */\n\n\n  exec() {\n    this.__startTestSuite().__updateTestCaseCount().__runAllTestCase().__finishTestSuite();\n\n    return this.__report;\n  }\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n\n\n  __updateTestCaseCount() {\n    this.__report.testSuiteCount = this.__testSuite.countOfTestCase();\n    return this;\n  }\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n\n\n  __runAllTestCase() {\n    this.__testSuite.testCases.forEach(test => {\n      var report = new TestCaseExecutor(test, this.__runner).exec();\n      var testCasePass = report.testFail === 0;\n      this.__report = this.__report.withTestCaseCount(this.__report.testCaseCount + 1).withTestCasePass(this.__report.testCaseFail + (testCasePass ? 1 : 0)).withTestCaseFail(this.__report.testCaseFail + (testCasePass ? 0 : 1)).withTestCount(this.__report.testCount + report.testCount).withTestFail(this.__report.testFail + report.testFail).withTestPass(this.__report.testPass + report.testPass);\n    });\n\n    return this;\n  }\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n\n\n  __startTestSuite() {\n    if (this.__runner.isVerbose()) {\n      console.log('\\x1b[46m%s\\x1b[0m', ` Start ${this.__testSuite.constructor.name} `);\n    }\n\n    return this;\n  }\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n\n\n  __finishTestSuite() {\n    if (this.__runner.isVerbose()) {\n      console.log('\\x1b[46m%s\\x1b[0m', ` Finish ${this.__testSuite.constructor.name} `);\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = TestSuiteExecutor;",{"version":3,"sources":["/mnt/DATA/DEV/JS/code-altimeter-js/src/TestExecutor/TestSuiteExecutor.js"],"names":["TestError","require","TEST_METHOD_PREFIX","TestCaseExecutor","TestSuiteReport","Reporter","TestSuiteExecutor","constructor","testSuite","runner","__testSuite","__report","name","__runner","exec","__startTestSuite","__updateTestCaseCount","__runAllTestCase","__finishTestSuite","testSuiteCount","countOfTestCase","testCases","forEach","test","report","testCasePass","testFail","withTestCaseCount","testCaseCount","withTestCasePass","testCaseFail","withTestCaseFail","withTestCount","testCount","withTestFail","withTestPass","testPass","isVerbose","console","log","module","exports"],"mappings":"AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAzB;;eAC6BA,OAAO,CAAC,eAAD,C;IAA7BC,kB,YAAAA,kB;;AACP,IAAMC,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAMG,eAAe,GAAGH,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,oBAAD,CAAxB;AAEA;;;;;AAGA,MAAMK,iBAAN,CAAwB;AACtB;;;;;AAKAC,EAAAA,WAAW,CAACC,SAAD,EAAYC,MAAZ,EAAoB;AAC7B;;;;;AAKA,SAAKC,WAAL,GAAmBF,SAAnB;AAEA;;;;;;AAKA,SAAKG,QAAL,GAAgB,IAAIP,eAAJ,CAAoB,KAAKM,WAAL,CAAiBH,WAAjB,CAA6BK,IAAjD,CAAhB;AACA;;;;;;AAKA,SAAKC,QAAL,GAAgBJ,MAAhB;AACD;AAED;;;;;;AAIAK,EAAAA,IAAI,GAAG;AACL,SACGC,gBADH,GAEGC,qBAFH,GAGGC,gBAHH,GAIGC,iBAJH;;AAKA,WAAO,KAAKP,QAAZ;AACD;AAED;;;;;;;AAKAK,EAAAA,qBAAqB,GAAG;AACtB,SAAKL,QAAL,CAAcQ,cAAd,GAA+B,KAAKT,WAAL,CAAiBU,eAAjB,EAA/B;AACA,WAAO,IAAP;AACD;AAED;;;;;;;AAKAH,EAAAA,gBAAgB,GAAG;AACjB,SAAKP,WAAL,CAAiBW,SAAjB,CAA2BC,OAA3B,CAAoCC,IAAD,IAAU;AAC3C,UAAMC,MAAM,GAAG,IAAIrB,gBAAJ,CAAqBoB,IAArB,EAA2B,KAAKV,QAAhC,EAA0CC,IAA1C,EAAf;AACA,UAAMW,YAAY,GAAGD,MAAM,CAACE,QAAP,KAAoB,CAAzC;AACA,WAAKf,QAAL,GAAgB,KAAKA,QAAL,CACbgB,iBADa,CACK,KAAKhB,QAAL,CAAciB,aAAd,GAA8B,CADnC,EAEbC,gBAFa,CAEI,KAAKlB,QAAL,CAAcmB,YAAd,IAA8BL,YAAY,GAAG,CAAH,GAAO,CAAjD,CAFJ,EAGbM,gBAHa,CAGI,KAAKpB,QAAL,CAAcmB,YAAd,IAA8BL,YAAY,GAAG,CAAH,GAAO,CAAjD,CAHJ,EAIbO,aAJa,CAIC,KAAKrB,QAAL,CAAcsB,SAAd,GAA0BT,MAAM,CAACS,SAJlC,EAKbC,YALa,CAKA,KAAKvB,QAAL,CAAce,QAAd,GAAyBF,MAAM,CAACE,QALhC,EAMbS,YANa,CAMA,KAAKxB,QAAL,CAAcyB,QAAd,GAAyBZ,MAAM,CAACY,QANhC,CAAhB;AAOD,KAVD;;AAWA,WAAO,IAAP;AACD;AAED;;;;;;;AAKArB,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKF,QAAL,CAAcwB,SAAd,EAAJ,EAA+B;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAkC,UAAS,KAAK7B,WAAL,CAAiBH,WAAjB,CAA6BK,IAAK,GAA7E;AACD;;AACD,WAAO,IAAP;AACD;AAED;;;;;;;AAKAM,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKL,QAAL,CAAcwB,SAAd,EAAJ,EAA+B;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAkC,WAAU,KAAK7B,WAAL,CAAiBH,WAAjB,CAA6BK,IAAK,GAA9E;AACD;;AACD,WAAO,IAAP;AACD;;AA7FqB;;AAgGxB4B,MAAM,CAACC,OAAP,GAAiBnC,iBAAjB","sourcesContent":["const TestError = require('../runner/TestError')\nconst {TEST_METHOD_PREFIX} = require('../constantes')\nconst TestCaseExecutor = require('./TestCaseExecutor')\nconst TestSuiteReport = require('../Report/TestSuiteReport')\nconst Reporter = require('../Report/Reporter')\n\n/**\n * @implements TestExecutable\n */\nclass TestSuiteExecutor {\n  /**\n   *\n   * @param {TestSuite} testSuite\n   * @param {TestRun} runner\n   */\n  constructor(testSuite, runner) {\n    /**\n     *\n     * @type {TestSuite}\n     * @private\n     */\n    this.__testSuite = testSuite\n\n    /**\n     *\n     * @type {TestSuiteReport}\n     * @private\n     */\n    this.__report = new TestSuiteReport(this.__testSuite.constructor.name)\n    /**\n     *\n     * @type {TestRun}\n     * @private\n     */\n    this.__runner = runner\n  }\n\n  /**\n   *\n   * @return {TestSuiteReport}\n   */\n  exec() {\n    this\n      .__startTestSuite()\n      .__updateTestCaseCount()\n      .__runAllTestCase()\n      .__finishTestSuite()\n    return this.__report\n  }\n\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n  __updateTestCaseCount() {\n    this.__report.testSuiteCount = this.__testSuite.countOfTestCase()\n    return this\n  }\n\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n  __runAllTestCase() {\n    this.__testSuite.testCases.forEach((test) => {\n      const report = new TestCaseExecutor(test, this.__runner).exec()\n      const testCasePass = report.testFail === 0\n      this.__report = this.__report\n        .withTestCaseCount(this.__report.testCaseCount + 1)\n        .withTestCasePass(this.__report.testCaseFail + (testCasePass ? 1 : 0))\n        .withTestCaseFail(this.__report.testCaseFail + (testCasePass ? 0 : 1))\n        .withTestCount(this.__report.testCount + report.testCount)\n        .withTestFail(this.__report.testFail + report.testFail)\n        .withTestPass(this.__report.testPass + report.testPass)\n    })\n    return this\n  }\n\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n  __startTestSuite() {\n    if (this.__runner.isVerbose()) {\n      console.log('\\x1b[46m%s\\x1b[0m', ` Start ${this.__testSuite.constructor.name} `)\n    }\n    return this\n  }\n\n  /**\n   *\n   * @return {TestSuiteExecutor}\n   * @private\n   */\n  __finishTestSuite() {\n    if (this.__runner.isVerbose()) {\n      console.log('\\x1b[46m%s\\x1b[0m', ` Finish ${this.__testSuite.constructor.name} `)\n    }\n    return this\n  }\n}\n\nmodule.exports = TestSuiteExecutor\n"]}]}