{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jsrouter/src/__tests__/TestRouter.test.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/src/__tests__/TestRouter.test.js","mtime":1549956088352},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["/* global runTest */\nimport { TestCase } from 'code-altimeter-js';\nimport { RouterBuilder } from '../Route/RouterBuilder';\nimport { Route } from '../Route/Route';\nimport { RouteWithParams } from '../Route/RouteWithParams';\nimport { PublicRouteHandler } from '../Route/PublicRouteHandler';\n\nvar assert = require('assert');\n/**\n *\n * @param {Object} obj\n * @return {Object}\n */\n\n\nvar builder = obj => Object.assign({}, obj);\n\nvar firstRoute = new Route('firstRoute', 'firstRoute/{pageName}/{pageId}', builder, params => {\n  console.log(params);\n});\nvar otherRoute = new Route('otherRoute', 'otherRoute/{pageName}/{pageId}', builder, params => {\n  console.log(params);\n});\nvar yetAnOtherRoute = new Route('yetAnOtherRoute', 'yetAnOtherRoute/{pageName}/{pageId}', builder, params => {\n  console.log(params);\n});\n/**\n * @extends TestCase\n */\n\nexport class TestRouterTest extends TestCase {\n  setUp() {\n    this.router = RouterBuilder.build();\n    this.publicRouteHandler = new PublicRouteHandler(this.router, Route);\n  }\n\n  testAddRoute() {\n    var routeWithSameName = this.publicRouteHandler.buildRoute('firstRoute', 'routeWithSameName/{pageName}/{pageId}', builder, params => {\n      console.log(params);\n    });\n    this.publicRouteHandler.addRoute(firstRoute);\n    assert.deepStrictEqual(this.router.route('firstRoute'), firstRoute, 'should retrieve route by name');\n    assert.throws(() => {\n      this.publicRouteHandler.addRoute(routeWithSameName);\n    });\n  }\n\n  testRemoveRoute() {\n    this.publicRouteHandler.addRoute(firstRoute);\n    this.publicRouteHandler.removeRoute('firstRoute');\n    assert.throws(() => {\n      this.router.route('firstRoute');\n    });\n  }\n\n  testUrlByName() {\n    this.publicRouteHandler.addRoute(firstRoute).addRoute(otherRoute).addRoute(yetAnOtherRoute);\n    var url = this.publicRouteHandler.url('firstRoute', {\n      pageName: 'bibi',\n      pageId: 5\n    });\n    assert.ok(url === 'firstRoute/bibi/5', 'should retrieve url from name with params');\n  }\n\n  testBuilder() {\n    this.publicRouteHandler.addRoute(firstRoute).addRoute(otherRoute).addRoute(yetAnOtherRoute);\n    var routeUrl = 'firstRoute/bibi/5';\n    var routeWithParams = this.router.routeByUrl(routeUrl);\n    assert.notDeepStrictEqual(routeWithParams.params, {\n      pageName: 'bibi',\n      pageId: '5'\n    }, 'route params prototype should be null');\n    assert.deepStrictEqual(routeWithParams.route.builder(routeWithParams.params), {\n      pageName: 'bibi',\n      pageId: '5'\n    }, 'route builder should be invoked');\n  }\n\n  testInvokeCallback() {\n    var martyr1 = false;\n    var routeWithCallback = new Route('routeWithCallback', 'routeWithCallback/{pageName}/{pageId}', builder, params => {\n      martyr1 = true;\n      console.log('testInvokeCallback payload : ');\n      console.log(params);\n    });\n    this.publicRouteHandler.addRoute(firstRoute).addRoute(otherRoute).addRoute(routeWithCallback).addRoute(yetAnOtherRoute);\n    var routeUrl = 'routeWithCallback/bibi/5';\n    var routeWithParams = this.router.routeByUrl(routeUrl);\n    routeWithParams.route.callback(routeWithParams.route.builder(routeWithParams.params));\n    assert.ok(martyr1, 'route test callback should be invoked');\n  }\n\n  testNotFound() {\n    this.publicRouteHandler.addRoute(firstRoute).addRoute(otherRoute);\n    var otherRouteUrlFalse = 'book/bobo/7/';\n    assert.throws(() => {\n      var routeWithParams = this.router.routeByUrl(otherRouteUrlFalse);\n    });\n  }\n\n}\nrunTest(TestRouterTest);",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jsrouter/src/__tests__/TestRouter.test.js"],"names":["TestCase","RouterBuilder","Route","RouteWithParams","PublicRouteHandler","assert","require","builder","obj","Object","assign","firstRoute","params","console","log","otherRoute","yetAnOtherRoute","TestRouterTest","setUp","router","build","publicRouteHandler","testAddRoute","routeWithSameName","buildRoute","addRoute","deepStrictEqual","route","throws","testRemoveRoute","removeRoute","testUrlByName","url","pageName","pageId","ok","testBuilder","routeUrl","routeWithParams","routeByUrl","notDeepStrictEqual","testInvokeCallback","martyr1","routeWithCallback","callback","testNotFound","otherRouteUrlFalse","runTest"],"mappings":"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","sourcesContent":["/* global runTest */\nimport {TestCase} from 'code-altimeter-js'\nimport {RouterBuilder} from '../Route/RouterBuilder'\nimport {Route} from '../Route/Route'\nimport {RouteWithParams} from '../Route/RouteWithParams'\nimport {PublicRouteHandler} from '../Route/PublicRouteHandler'\n\nconst assert = require('assert')\n/**\n *\n * @param {Object} obj\n * @return {Object}\n */\nconst builder = obj => Object.assign({}, obj)\n\nconst firstRoute = new Route(\n  'firstRoute',\n  'firstRoute/{pageName}/{pageId}',\n  builder,\n  (params) => {\n    console.log(params)\n  }\n)\n\nconst otherRoute = new Route(\n  'otherRoute',\n  'otherRoute/{pageName}/{pageId}',\n  builder,\n  (params) => {\n    console.log(params)\n  }\n)\n\nconst yetAnOtherRoute = new Route(\n  'yetAnOtherRoute',\n  'yetAnOtherRoute/{pageName}/{pageId}',\n  builder,\n  (params) => {\n    console.log(params)\n  }\n)\n\n/**\n * @extends TestCase\n */\nexport class TestRouterTest extends TestCase {\n  setUp() {\n    this.router = RouterBuilder.build()\n    this.publicRouteHandler = new PublicRouteHandler(this.router, Route)\n  }\n\n  testAddRoute() {\n    const routeWithSameName = this.publicRouteHandler.buildRoute(\n      'firstRoute',\n      'routeWithSameName/{pageName}/{pageId}',\n      builder,\n      (params) => {\n        console.log(params)\n      }\n    )\n\n    this.publicRouteHandler.addRoute(firstRoute)\n\n    assert.deepStrictEqual(\n      this.router.route('firstRoute'),\n      firstRoute,\n      'should retrieve route by name'\n    )\n\n    assert.throws(() => {\n      this.publicRouteHandler.addRoute(routeWithSameName)\n    })\n  }\n\n  testRemoveRoute() {\n    this.publicRouteHandler.addRoute(firstRoute)\n    this.publicRouteHandler.removeRoute('firstRoute')\n\n    assert.throws(() => {\n      this.router.route('firstRoute')\n    })\n  }\n\n  testUrlByName() {\n    this.publicRouteHandler\n      .addRoute(firstRoute)\n      .addRoute(otherRoute)\n      .addRoute(yetAnOtherRoute)\n\n    const url = this.publicRouteHandler.url('firstRoute', {pageName: 'bibi', pageId: 5})\n\n    assert.ok(url === 'firstRoute/bibi/5', 'should retrieve url from name with params')\n  }\n\n  testBuilder() {\n    this.publicRouteHandler\n      .addRoute(firstRoute)\n      .addRoute(otherRoute)\n      .addRoute(yetAnOtherRoute)\n\n    const routeUrl = 'firstRoute/bibi/5'\n    const routeWithParams = this.router.routeByUrl(routeUrl)\n\n    assert.notDeepStrictEqual(routeWithParams.params,\n      {pageName: 'bibi', pageId: '5'},\n      'route params prototype should be null'\n    )\n    assert.deepStrictEqual(routeWithParams.route.builder(routeWithParams.params),\n      {pageName: 'bibi', pageId: '5'},\n      'route builder should be invoked'\n    )\n  }\n\n  testInvokeCallback() {\n    let martyr1 = false\n\n    const routeWithCallback = new Route(\n      'routeWithCallback',\n      'routeWithCallback/{pageName}/{pageId}',\n      builder,\n      (params) => {\n        martyr1 = true\n        console.log('testInvokeCallback payload : ')\n        console.log(params)\n      }\n    )\n\n    this.publicRouteHandler\n      .addRoute(firstRoute)\n      .addRoute(otherRoute)\n      .addRoute(routeWithCallback)\n      .addRoute(yetAnOtherRoute)\n\n    const routeUrl = 'routeWithCallback/bibi/5'\n    const routeWithParams = this.router.routeByUrl(routeUrl)\n\n    routeWithParams.route.callback(\n      routeWithParams.route.builder(routeWithParams.params)\n    )\n\n    assert.ok(martyr1, 'route test callback should be invoked')\n  }\n\n  testNotFound() {\n    this.publicRouteHandler\n      .addRoute(firstRoute)\n      .addRoute(otherRoute)\n\n    const otherRouteUrlFalse = 'book/bobo/7/'\n\n    assert.throws(() => {\n      const routeWithParams = this.router.routeByUrl(otherRouteUrlFalse)\n    })\n  }\n}\n\nrunTest(TestRouterTest)\n"]}]}