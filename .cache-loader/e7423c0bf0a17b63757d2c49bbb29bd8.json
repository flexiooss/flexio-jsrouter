{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/code-altimeter-js/src/Report/ReportContainer.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/code-altimeter-js/src/Report/ReportContainer.js","mtime":1548969177098},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["var TestReport = require('./TestReport');\n\nvar TestCaseReport = require('./TestCaseReport');\n\nvar TestSuiteReport = require('./TestSuiteReport');\n\nclass ReportContainer {\n  /**\n   *\n   * @param {TestRunReport} testRunReport\n   */\n  constructor(testRunReport) {\n    /**\n     *\n     * @type {Array<TestReport>}\n     * @private\n     */\n    this.__testReport = [];\n    /**\n     *\n     * @type {Array<TestCaseReport>}\n     * @private\n     */\n\n    this.__testCaseReport = [];\n    /**\n     *\n     * @type {Array<TestSuiteReport>}\n     * @private\n     */\n\n    this.__testSuiteReport = [];\n    /**\n     *\n     * @type {TestRunReport}\n     * @private\n     */\n\n    this.__testRunReport = testRunReport;\n  }\n  /**\n   *\n   * @return {TestRunReport}\n   */\n\n\n  get testRunReport() {\n    return this.__testRunReport;\n  }\n  /**\n   *\n   * @param {Report} report\n   * @return {ReportContainer}\n   */\n\n\n  addReport(report) {\n    switch (report.constructor) {\n      case TestReport:\n        this.__testReport.push(report);\n\n        break;\n\n      case TestCaseReport:\n        this.__testCaseReport.push(report);\n\n        break;\n\n      case TestSuiteReport:\n        this.__testSuiteReport.push(report);\n\n        break;\n\n      default:\n        throw Error('Report not supported');\n    }\n\n    return this;\n  }\n  /**\n   *\n   * @return {ReportContainer}\n   */\n\n\n  buildTestRunReport() {\n    this.__testReport.forEach(v => {\n      this.__updateTest(v);\n    });\n\n    this.__testCaseReport.forEach(v => {\n      this.__updateTest(v);\n    });\n\n    this.__testSuiteReport.forEach(v => {\n      this.__updateTest(v).__updateSuiteCase(v);\n    });\n\n    return this;\n  }\n  /**\n   *\n   * @param {Report} v\n   * @return {ReportContainer}\n   * @private\n   */\n\n\n  __updateTest(v) {\n    this.testRunReport.withTestPass(this.testRunReport.testPass + v.testPass).withTestFail(this.testRunReport.testFail + v.testFail).withTestCount(this.testRunReport.testCount + (v.testPass + v.testFail));\n    return this;\n  }\n  /**\n   *\n   * @param {Report} v\n   * @return {ReportContainer}\n   * @private\n   */\n\n\n  __updateSuiteCase(v) {\n    this.testRunReport.withTestSuiteCount(this.testRunReport.testSuiteCount + 1).withTestCaseCount(this.testRunReport.testCaseCount + v.testCaseCount).withTestCasePass(this.testRunReport.testCasePass + v.testCasePass).withTestCaseFail(this.testRunReport.testCaseFail + v.testCaseFail);\n\n    if (v.failed()) {\n      this.testRunReport.withTestSuiteFail(this.testRunReport.testSuiteFail + 1);\n    } else {\n      this.testRunReport.withTestSuitePass(this.testRunReport.testSuitePass + 1);\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = ReportContainer;",{"version":3,"sources":["/mnt/DATA/DEV/JS/code-altimeter-js/src/Report/ReportContainer.js"],"names":["TestReport","require","TestCaseReport","TestSuiteReport","ReportContainer","constructor","testRunReport","__testReport","__testCaseReport","__testSuiteReport","__testRunReport","addReport","report","push","Error","buildTestRunReport","forEach","v","__updateTest","__updateSuiteCase","withTestPass","testPass","withTestFail","testFail","withTestCount","testCount","withTestSuiteCount","testSuiteCount","withTestCaseCount","testCaseCount","withTestCasePass","testCasePass","withTestCaseFail","testCaseFail","failed","withTestSuiteFail","testSuiteFail","withTestSuitePass","testSuitePass","module","exports"],"mappings":"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","sourcesContent":["const TestReport = require('./TestReport')\nconst TestCaseReport = require('./TestCaseReport')\nconst TestSuiteReport = require('./TestSuiteReport')\n\nclass ReportContainer {\n  /**\n   *\n   * @param {TestRunReport} testRunReport\n   */\n  constructor(testRunReport) {\n    /**\n     *\n     * @type {Array<TestReport>}\n     * @private\n     */\n    this.__testReport = []\n    /**\n     *\n     * @type {Array<TestCaseReport>}\n     * @private\n     */\n    this.__testCaseReport = []\n    /**\n     *\n     * @type {Array<TestSuiteReport>}\n     * @private\n     */\n    this.__testSuiteReport = []\n    /**\n     *\n     * @type {TestRunReport}\n     * @private\n     */\n    this.__testRunReport = testRunReport\n  }\n\n  /**\n   *\n   * @return {TestRunReport}\n   */\n  get testRunReport() {\n    return this.__testRunReport\n  }\n\n  /**\n   *\n   * @param {Report} report\n   * @return {ReportContainer}\n   */\n  addReport(report) {\n    switch (report.constructor) {\n      case TestReport:\n        this.__testReport.push(report)\n        break\n      case TestCaseReport :\n        this.__testCaseReport.push(report)\n        break\n      case TestSuiteReport:\n        this.__testSuiteReport.push(report)\n        break\n      default:\n        throw Error('Report not supported')\n    }\n    return this\n  }\n\n  /**\n   *\n   * @return {ReportContainer}\n   */\n  buildTestRunReport() {\n    this.__testReport.forEach((v) => {\n      this.__updateTest(v)\n    })\n    this.__testCaseReport.forEach((v) => {\n      this.__updateTest(v)\n    })\n    this.__testSuiteReport.forEach((v) => {\n      this\n        .__updateTest(v)\n        .__updateSuiteCase(v)\n    })\n    return this\n  }\n\n  /**\n   *\n   * @param {Report} v\n   * @return {ReportContainer}\n   * @private\n   */\n  __updateTest(v) {\n    this.testRunReport\n      .withTestPass(this.testRunReport.testPass + v.testPass)\n      .withTestFail(this.testRunReport.testFail + v.testFail)\n      .withTestCount(this.testRunReport.testCount + (v.testPass + v.testFail))\n    return this\n  }\n\n  /**\n   *\n   * @param {Report} v\n   * @return {ReportContainer}\n   * @private\n   */\n  __updateSuiteCase(v) {\n    this.testRunReport\n      .withTestSuiteCount(this.testRunReport.testSuiteCount + 1)\n      .withTestCaseCount(this.testRunReport.testCaseCount + v.testCaseCount)\n      .withTestCasePass(this.testRunReport.testCasePass + v.testCasePass)\n      .withTestCaseFail(this.testRunReport.testCaseFail + v.testCaseFail)\n    if (v.failed()) {\n      this.testRunReport\n        .withTestSuiteFail(this.testRunReport.testSuiteFail + 1)\n    } else {\n      this.testRunReport\n        .withTestSuitePass(this.testRunReport.testSuitePass + 1)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = ReportContainer\n"]}]}