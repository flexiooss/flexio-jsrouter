{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jsrouter/src/TemplateUrl/UrlTemplateRegexp.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/src/TemplateUrl/UrlTemplateRegexp.js","mtime":1549895453036},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["var PARAMETER_RE = '[^/]+';\nvar PARAMETER_TEMPLATE_RE_IN = '\\{';\nvar PARAMETER_TEMPLATE_RE_OUT = '\\}';\nvar PARAMETER_TEMPLATE_RE = PARAMETER_TEMPLATE_RE_IN + '(' + PARAMETER_RE + ')' + PARAMETER_TEMPLATE_RE_OUT;\n/**\n *\n * @type {Map<string, RegExp>}\n * @private\n */\n\nvar __memoizeRegexp = new Map();\n\nexport class UrlTemplateRegexp {\n  /**\n   * @param {string} urlTemplate\n   * @return {RegExp}\n   */\n  static regexpFromUrlTemplate(urlTemplate) {\n    return new this().__templateToRegexp(urlTemplate);\n  }\n  /**\n   *\n   * @param {string} urlTemplate\n   * @param {Object} routeParameter\n   * @return {string}\n   * @constructor\n   * @static\n   */\n\n\n  static UrlFromUrlTemplate(urlTemplate, routeParameter) {\n    return new this().__templateToUrl(urlTemplate, routeParameter);\n  }\n  /**\n   *\n   * @param {string} urlTemplate\n   * @return {RegExp}\n   * @private\n   */\n\n\n  __templateToRegexp(urlTemplate) {\n    var matches;\n\n    var re = this.__getCompiledRegexp(PARAMETER_TEMPLATE_RE);\n\n    var stringRe = urlTemplate;\n\n    do {\n      matches = re.exec(urlTemplate);\n\n      if (matches) {\n        stringRe = stringRe.replace(this.__getCompiledRegexp(this.__searchTemplateParam(matches[1])), this.__namedGroup(matches[1]));\n      }\n    } while (matches);\n\n    return new RegExp(this.__addBeginRegexp(this.__addTraillingSlashesRegex(stringRe)));\n  }\n  /**\n   *\n   * @param {string} stringRegexp\n   * @param {boolean} resetIndex\n   * @return {RegExp}\n   * @private\n   */\n\n\n  __getCompiledRegexp(stringRegexp) {\n    var resetIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!__memoizeRegexp.has(stringRegexp)) {\n      __memoizeRegexp.set(stringRegexp, new RegExp(stringRegexp, 'gi'));\n    }\n\n    var re = __memoizeRegexp.get(stringRegexp);\n\n    if (resetIndex === true) {\n      re.lastIndex = 0;\n    }\n\n    return re;\n  }\n  /**\n   *\n   * @param {string} name\n   * @return {string}\n   * @private\n   */\n\n\n  __searchTemplateParam(name) {\n    return PARAMETER_TEMPLATE_RE_IN + name + PARAMETER_TEMPLATE_RE_OUT;\n  }\n  /**\n   *\n   * @param {string} name\n   * @return {string}\n   * @private\n   */\n\n\n  __namedGroup(name) {\n    return '(?<' + name + '>' + PARAMETER_RE + ')';\n  }\n  /**\n   *\n   * @param {string} stringRe\n   * @return {string}\n   * @private\n   */\n\n\n  __addBeginRegexp(stringRe) {\n    return '^' + stringRe;\n  }\n  /**\n   *\n   * @param {string} stringRe\n   * @return {string}\n   * @private\n   */\n\n\n  __addTraillingSlashesRegex(stringRe) {\n    return stringRe + '/?$';\n  }\n  /**\n   *\n   * @param {string} urlTemplate\n   * @param {Object} routeParameter\n   * @return {string}\n   */\n\n\n  __templateToUrl(urlTemplate, routeParameter) {\n    var matches;\n\n    var re = this.__getCompiledRegexp(PARAMETER_TEMPLATE_RE);\n\n    var url = urlTemplate;\n\n    do {\n      matches = re.exec(urlTemplate);\n\n      if (matches) {\n        url = url.replace(this.__getCompiledRegexp(this.__searchTemplateParam(matches[1])), this.__getValueByKey(matches[1], routeParameter));\n      }\n    } while (matches);\n\n    return url;\n  }\n  /**\n   *\n   * @param {string} key\n   * @param {Object<string,*>} obj\n   * @return {string}\n   * @private\n   */\n\n\n  __getValueByKey(key, obj) {\n    return obj[key].toString();\n  }\n\n}",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jsrouter/src/TemplateUrl/UrlTemplateRegexp.js"],"names":["PARAMETER_RE","PARAMETER_TEMPLATE_RE_IN","PARAMETER_TEMPLATE_RE_OUT","PARAMETER_TEMPLATE_RE","__memoizeRegexp","Map","UrlTemplateRegexp","regexpFromUrlTemplate","urlTemplate","__templateToRegexp","UrlFromUrlTemplate","routeParameter","__templateToUrl","matches","re","__getCompiledRegexp","stringRe","exec","replace","__searchTemplateParam","__namedGroup","RegExp","__addBeginRegexp","__addTraillingSlashesRegex","stringRegexp","resetIndex","has","set","get","lastIndex","name","url","__getValueByKey","key","obj","toString"],"mappings":"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","sourcesContent":["const PARAMETER_RE = '[^/]+'\nconst PARAMETER_TEMPLATE_RE_IN = '\\{'\nconst PARAMETER_TEMPLATE_RE_OUT = '\\}'\nconst PARAMETER_TEMPLATE_RE = PARAMETER_TEMPLATE_RE_IN + '(' + PARAMETER_RE + ')' + PARAMETER_TEMPLATE_RE_OUT\n\n/**\n *\n * @type {Map<string, RegExp>}\n * @private\n */\nconst __memoizeRegexp = new Map()\n\nexport class UrlTemplateRegexp {\n  /**\n   * @param {string} urlTemplate\n   * @return {RegExp}\n   */\n  static regexpFromUrlTemplate(urlTemplate) {\n    return new this().__templateToRegexp(urlTemplate)\n  }\n\n  /**\n   *\n   * @param {string} urlTemplate\n   * @param {Object} routeParameter\n   * @return {string}\n   * @constructor\n   * @static\n   */\n  static UrlFromUrlTemplate(urlTemplate, routeParameter) {\n    return new this().__templateToUrl(urlTemplate, routeParameter)\n  }\n\n  /**\n   *\n   * @param {string} urlTemplate\n   * @return {RegExp}\n   * @private\n   */\n  __templateToRegexp(urlTemplate) {\n    var matches\n    const re = this.__getCompiledRegexp(PARAMETER_TEMPLATE_RE)\n    var stringRe = urlTemplate\n    do {\n      matches = re.exec(urlTemplate)\n      if (matches) {\n        stringRe = stringRe.replace(\n          this.__getCompiledRegexp(this.__searchTemplateParam(matches[1])),\n          this.__namedGroup(matches[1])\n        )\n      }\n    } while (matches)\n    return new RegExp(this.__addBeginRegexp(this.__addTraillingSlashesRegex(stringRe)))\n  }\n\n  /**\n   *\n   * @param {string} stringRegexp\n   * @param {boolean} resetIndex\n   * @return {RegExp}\n   * @private\n   */\n  __getCompiledRegexp(stringRegexp, resetIndex = true) {\n    if (!__memoizeRegexp.has(stringRegexp)) {\n      __memoizeRegexp.set(\n        stringRegexp,\n        new RegExp(stringRegexp, 'gi')\n      )\n    }\n    const re = __memoizeRegexp.get(stringRegexp)\n    if (resetIndex === true) {\n      re.lastIndex = 0\n    }\n    return re\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @return {string}\n   * @private\n   */\n  __searchTemplateParam(name) {\n    return PARAMETER_TEMPLATE_RE_IN + name + PARAMETER_TEMPLATE_RE_OUT\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @return {string}\n   * @private\n   */\n  __namedGroup(name) {\n    return '(?<' + name + '>' + PARAMETER_RE + ')'\n  }\n\n  /**\n   *\n   * @param {string} stringRe\n   * @return {string}\n   * @private\n   */\n  __addBeginRegexp(stringRe) {\n    return '^' + stringRe\n  }\n\n  /**\n   *\n   * @param {string} stringRe\n   * @return {string}\n   * @private\n   */\n  __addTraillingSlashesRegex(stringRe) {\n    return stringRe + '/?$'\n  }\n\n  /**\n   *\n   * @param {string} urlTemplate\n   * @param {Object} routeParameter\n   * @return {string}\n   */\n  __templateToUrl(urlTemplate, routeParameter) {\n    var matches\n    const re = this.__getCompiledRegexp(PARAMETER_TEMPLATE_RE)\n    var url = urlTemplate\n    do {\n      matches = re.exec(urlTemplate)\n      if (matches) {\n        url = url.replace(\n          this.__getCompiledRegexp(this.__searchTemplateParam(matches[1])),\n          this.__getValueByKey(matches[1], routeParameter)\n        )\n      }\n    } while (matches)\n    return url\n  }\n\n  /**\n   *\n   * @param {string} key\n   * @param {Object<string,*>} obj\n   * @return {string}\n   * @private\n   */\n  __getValueByKey(key, obj) {\n    return obj[key].toString()\n  }\n}\n"]}]}