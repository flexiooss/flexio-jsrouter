{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/flexio-jsrouter/src/Route/RouteHandler.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/src/Route/RouteHandler.js","mtime":1549895785109},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["import { assert } from 'flexio-jshelpers';\nimport { Route } from './Route';\nimport { RouteCompiled } from './RouteCompiled';\nimport { UrlTemplateRegexp } from '../TemplateUrl/UrlTemplateRegexp';\nimport { RouteNotFoundException } from '../../RouteNotFoundException';\nimport { UrlParser } from '../UrlParser';\nimport { RouteWithParams } from './RouteWithParams';\n/**\n * @implements {RouteHandlerInterface}\n * @class RouteHandler\n */\n\nexport class RouteHandler {\n  constructor() {\n    /**\n     *\n     * @type {Map<string, RouteCompiled>}\n     * @property\n     * @private\n     */\n    this.__routes = new Map();\n  }\n  /**\n   *\n   * @return {Map<string, RouteCompiled>}\n   */\n\n\n  get routes() {\n    return this.__routes;\n  }\n  /**\n   *\n   * @param {Route} route\n   * @return {RouteHandler}\n   */\n\n\n  addRoute(route) {\n    assert(route instanceof Route, 'flexio-jsrouter:RoutesHandler:addRoute : `route` argument should be an instance of Route');\n    assert(!this.__routes.has(route.name), 'flexio-jsrouter:RoutesHandler:addRoute: route name `%s`  already exists', route.name);\n    return this.__registerRoute(route);\n  }\n  /**\n   *\n   * @param {Route} route\n   * @return {RouteHandler}\n   * @private\n   */\n\n\n  __registerRoute(route) {\n    this.__routes.set(route.name, new RouteCompiled(route, UrlTemplateRegexp.regexpFromUrlTemplate(route.urlTemplate)));\n\n    return this;\n  }\n  /**\n   *\n   * @param {string} name\n   * @return {RouteHandler}\n   */\n\n\n  removeRoute(name) {\n    this.__routes.delete(name);\n\n    return this;\n  }\n  /**\n   *\n   * @param {string} name\n   * @return {boolean}\n   */\n\n\n  hasRoute(name) {\n    return this.__routes.has(name);\n  }\n  /**\n   *\n   * @param {string} name\n   * @return {Route}\n   */\n\n\n  route(name) {\n    if (!this.hasRoute(name)) {\n      throw new RouteNotFoundException(name, 'Route not found with name : ' + name);\n    }\n\n    return this.__routes.get(name).route;\n  }\n  /**\n   *\n   * @param {string} url\n   * @return {RouteWithParams}\n   * @throws {RouteNotFoundException}\n   */\n\n\n  routeByUrl(url) {\n    var route = null;\n    var params = null;\n    var isFound = false;\n\n    this.__routes.forEach(routeCompiled => {\n      var matches = new UrlParser(url).execWith(routeCompiled.regexp);\n\n      if (isFound === false && matches !== null) {\n        route = routeCompiled.route;\n        params = matches.groups;\n        isFound = true;\n      }\n    });\n\n    if (!isFound) {\n      throw new RouteNotFoundException(url, 'Route not found with url : ' + url);\n    }\n\n    return new RouteWithParams(route, params);\n  }\n  /**\n   *\n   * @param {string} name\n   * @param {Object} routeParameters\n   * @param {?PartialUrl} partialUrl\n   * @return {string}\n   */\n\n\n  urlByName(name, routeParameters, partialUrl) {\n    if (!this.__routes.has(name)) {\n      throw new RouteNotFoundException(name, 'Route not found with name : ' + name);\n    }\n\n    var routeCompiled = this.__routes.get(name);\n\n    var url = UrlTemplateRegexp.UrlFromUrlTemplate(routeCompiled.route.urlTemplate, routeParameters);\n    return url;\n  }\n\n}",{"version":3,"sources":["/mnt/DATA/DEV/JS/flexio-jsrouter/src/Route/RouteHandler.js"],"names":["assert","Route","RouteCompiled","UrlTemplateRegexp","RouteNotFoundException","UrlParser","RouteWithParams","RouteHandler","constructor","__routes","Map","routes","addRoute","route","has","name","__registerRoute","set","regexpFromUrlTemplate","urlTemplate","removeRoute","delete","hasRoute","get","routeByUrl","url","params","isFound","forEach","routeCompiled","matches","execWith","regexp","groups","urlByName","routeParameters","partialUrl","UrlFromUrlTemplate"],"mappings":"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","sourcesContent":["import {assert} from 'flexio-jshelpers'\nimport {Route} from './Route'\nimport {RouteCompiled} from './RouteCompiled'\nimport {UrlTemplateRegexp} from '../TemplateUrl/UrlTemplateRegexp'\nimport {RouteNotFoundException} from '../../RouteNotFoundException'\nimport {UrlParser} from '../UrlParser'\nimport {RouteWithParams} from './RouteWithParams'\n\n/**\n * @implements {RouteHandlerInterface}\n * @class RouteHandler\n */\nexport class RouteHandler {\n  constructor() {\n    /**\n     *\n     * @type {Map<string, RouteCompiled>}\n     * @property\n     * @private\n     */\n    this.__routes = new Map()\n  }\n\n  /**\n   *\n   * @return {Map<string, RouteCompiled>}\n   */\n  get routes() {\n    return this.__routes\n  }\n\n  /**\n   *\n   * @param {Route} route\n   * @return {RouteHandler}\n   */\n  addRoute(route) {\n    assert(route instanceof Route,\n      'flexio-jsrouter:RoutesHandler:addRoute : `route` argument should be an instance of Route')\n\n    assert(\n      !this.__routes.has(route.name),\n      'flexio-jsrouter:RoutesHandler:addRoute: route name `%s`  already exists',\n      route.name\n    )\n    return this.__registerRoute(route)\n  }\n\n  /**\n   *\n   * @param {Route} route\n   * @return {RouteHandler}\n   * @private\n   */\n  __registerRoute(route) {\n    this.__routes.set(\n      route.name,\n      new RouteCompiled(route, UrlTemplateRegexp.regexpFromUrlTemplate(route.urlTemplate))\n    )\n    return this\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @return {RouteHandler}\n   */\n  removeRoute(name) {\n    this.__routes.delete(name)\n    return this\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @return {boolean}\n   */\n  hasRoute(name) {\n    return this.__routes.has(name)\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @return {Route}\n   */\n  route(name) {\n    if (!this.hasRoute(name)) {\n      throw new RouteNotFoundException(name, 'Route not found with name : ' + name)\n    }\n    return this.__routes.get(name).route\n  }\n\n  /**\n   *\n   * @param {string} url\n   * @return {RouteWithParams}\n   * @throws {RouteNotFoundException}\n   */\n  routeByUrl(url) {\n    var route = null\n    var params = null\n    var isFound = false\n\n    this.__routes.forEach((routeCompiled) => {\n      let matches = new UrlParser(url).execWith(routeCompiled.regexp)\n\n      if (isFound === false && matches !== null) {\n        route = routeCompiled.route\n        params = matches.groups\n        isFound = true\n      }\n    })\n\n    if (!isFound) {\n      throw new RouteNotFoundException(url, 'Route not found with url : ' + url)\n    }\n    return new RouteWithParams(route, params)\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @param {Object} routeParameters\n   * @param {?PartialUrl} partialUrl\n   * @return {string}\n   */\n  urlByName(name, routeParameters, partialUrl) {\n    if (!this.__routes.has(name)) {\n      throw new RouteNotFoundException(name, 'Route not found with name : ' + name)\n    }\n    const routeCompiled = this.__routes.get(name)\n    const url = UrlTemplateRegexp.UrlFromUrlTemplate(routeCompiled.route.urlTemplate, routeParameters)\n    return url\n  }\n}\n"]}]}