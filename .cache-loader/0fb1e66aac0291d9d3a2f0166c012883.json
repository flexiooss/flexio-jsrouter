{"remainingRequest":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js??ref--6!/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js??ref--5!/mnt/DATA/DEV/JS/code-altimeter-js/src/TestExecutor/TestCaseExecutor.js","dependencies":[{"path":"/mnt/DATA/DEV/JS/code-altimeter-js/src/TestExecutor/TestCaseExecutor.js","mtime":1549463817740},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/cache-loader/dist/cjs.js","mtime":1549958118441},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/babel-loader/lib/index.js","mtime":1548754057753},{"path":"/mnt/DATA/DEV/JS/flexio-jsrouter/node_modules/eslint-loader/index.js","mtime":1549372049588}],"contextDependencies":[],"result":["var _require = require('../constantes'),\n    TEST_METHOD_PREFIX = _require.TEST_METHOD_PREFIX;\n\nvar TestCaseReport = require('../Report/TestCaseReport');\n\nvar TestExecutor = require('./TestExecutor');\n\nvar StaticInvoker = require('./StaticInvoker');\n/**\n * @implements TestExecutable\n */\n\n\nclass TestCaseExecutor {\n  /**\n   *\n   * @param {TestCase} testCase\n   * @param {TestRun} runner\n   */\n  constructor(testCase, runner) {\n    /**\n     *\n     * @type {TestCase}\n     * @private\n     */\n    this.__testCase = testCase;\n    /**\n     *\n     * @type {Array<string>}\n     * @private\n     */\n\n    this.__testsList = [];\n    /**\n     *\n     * @type {TestCaseReport}\n     * @private\n     */\n\n    this.__report = new TestCaseReport(this.__testCase.name);\n    /**\n     *\n     * @type {TestRun}\n     * @private\n     */\n\n    this.__runner = runner;\n    /**\n     * @type {StaticInvoker}\n     * @private\n     */\n\n    this.__staticInvoker = new StaticInvoker(this.__testCase, this.__runner);\n  }\n  /**\n   *\n   * @return {TestCaseReport}\n   */\n\n\n  exec() {\n    this.__staticInvoker.invokeBeforeClass();\n\n    this.__updateTestsList().__updateTestCount(this.__testsList.length).__runTests();\n\n    this.__staticInvoker.invokeAfterClass();\n\n    return this.__report;\n  }\n  /**\n   *\n   * @return {TestCaseExecutor}\n   * @private\n   */\n\n\n  __runTests() {\n    /**\n     * @type {Array<string>} tests\n     */\n    this.__testsList.forEach(v => {\n      this.__updateReport(new TestExecutor(this.__testCase, v, this.__runner).exec());\n    });\n\n    return this;\n  }\n  /**\n   *\n   * @return {TestCaseExecutor}\n   * @private\n   */\n\n\n  __updateTestsList() {\n    this.__testsList.push(...this.__getInstanceMethodNames(new this.__testCase()).filter(v => {\n      return v.startsWith(TEST_METHOD_PREFIX);\n    }));\n\n    return this;\n  }\n  /**\n   *\n   * @param {number} n\n   * @return {TestCaseExecutor}\n   * @private\n   */\n\n\n  __updateTestCount(n) {\n    this.__report.withTestCount(n);\n\n    return this;\n  }\n  /**\n   *\n   * @param {TestReport} testReport\n   * @return {TestCaseExecutor}\n   * @private\n   */\n\n\n  __updateReport(testReport) {\n    this.__report.withTestFail(this.__report.testFail + testReport.testFail).withTestPass(this.__report.testPass + testReport.testPass);\n\n    return this;\n  }\n  /**\n   *\n   * @param {TestCase} obj\n   * @return {Array<string>}\n   * @private\n   */\n\n\n  __getInstanceMethodNames(obj) {\n    var array = [];\n    var proto = Object.getPrototypeOf(obj);\n\n    while (proto) {\n      Object.getOwnPropertyNames(proto).forEach(name => {\n        if (name !== 'constructor') {\n          if (this.__hasMethod(proto, name)) {\n            array.push(name);\n          }\n        }\n      });\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return array;\n  }\n  /**\n   *\n   * @param {Object} obj\n   * @param {string} name\n   * @return {boolean}\n   * @private\n   */\n\n\n  __hasMethod(obj, name) {\n    var desc = Object.getOwnPropertyDescriptor(obj, name);\n    return !!desc && typeof desc.value === 'function';\n  }\n\n}\n\nmodule.exports = TestCaseExecutor;",{"version":3,"sources":["/mnt/DATA/DEV/JS/code-altimeter-js/src/TestExecutor/TestCaseExecutor.js"],"names":["require","TEST_METHOD_PREFIX","TestCaseReport","TestExecutor","StaticInvoker","TestCaseExecutor","constructor","testCase","runner","__testCase","__testsList","__report","name","__runner","__staticInvoker","exec","invokeBeforeClass","__updateTestsList","__updateTestCount","length","__runTests","invokeAfterClass","forEach","v","__updateReport","push","__getInstanceMethodNames","filter","startsWith","n","withTestCount","testReport","withTestFail","testFail","withTestPass","testPass","obj","array","proto","Object","getPrototypeOf","getOwnPropertyNames","__hasMethod","desc","getOwnPropertyDescriptor","value","module","exports"],"mappings":"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","sourcesContent":["const {TEST_METHOD_PREFIX} = require('../constantes')\nconst TestCaseReport = require('../Report/TestCaseReport')\nconst TestExecutor = require('./TestExecutor')\nconst StaticInvoker = require('./StaticInvoker')\n\n/**\n * @implements TestExecutable\n */\nclass TestCaseExecutor {\n  /**\n   *\n   * @param {TestCase} testCase\n   * @param {TestRun} runner\n   */\n  constructor(testCase, runner) {\n    /**\n     *\n     * @type {TestCase}\n     * @private\n     */\n    this.__testCase = testCase\n    /**\n     *\n     * @type {Array<string>}\n     * @private\n     */\n    this.__testsList = []\n    /**\n     *\n     * @type {TestCaseReport}\n     * @private\n     */\n    this.__report = new TestCaseReport(this.__testCase.name)\n    /**\n     *\n     * @type {TestRun}\n     * @private\n     */\n    this.__runner = runner\n    /**\n     * @type {StaticInvoker}\n     * @private\n     */\n    this.__staticInvoker = new StaticInvoker(this.__testCase, this.__runner)\n  }\n\n  /**\n   *\n   * @return {TestCaseReport}\n   */\n  exec() {\n    this.__staticInvoker.invokeBeforeClass()\n\n    this.__updateTestsList()\n      .__updateTestCount(this.__testsList.length)\n      .__runTests()\n\n    this.__staticInvoker.invokeAfterClass()\n    return this.__report\n  }\n\n  /**\n   *\n   * @return {TestCaseExecutor}\n   * @private\n   */\n  __runTests() {\n    /**\n     * @type {Array<string>} tests\n     */\n    this.__testsList.forEach((v) => {\n      this.__updateReport(\n        new TestExecutor(\n          this.__testCase,\n          v,\n          this.__runner\n        )\n          .exec()\n      )\n    })\n    return this\n  }\n\n  /**\n   *\n   * @return {TestCaseExecutor}\n   * @private\n   */\n  __updateTestsList() {\n    this.__testsList\n      .push(...this.__getInstanceMethodNames(new this.__testCase())\n        .filter((v) => {\n          return v.startsWith(TEST_METHOD_PREFIX)\n        }))\n    return this\n  }\n\n  /**\n   *\n   * @param {number} n\n   * @return {TestCaseExecutor}\n   * @private\n   */\n  __updateTestCount(n) {\n    this.__report.withTestCount(n)\n    return this\n  }\n\n  /**\n   *\n   * @param {TestReport} testReport\n   * @return {TestCaseExecutor}\n   * @private\n   */\n  __updateReport(testReport) {\n    this.__report\n      .withTestFail(this.__report.testFail + testReport.testFail)\n      .withTestPass(this.__report.testPass + testReport.testPass)\n    return this\n  }\n\n  /**\n   *\n   * @param {TestCase} obj\n   * @return {Array<string>}\n   * @private\n   */\n  __getInstanceMethodNames(obj) {\n    let array = []\n    let proto = Object.getPrototypeOf(obj)\n    while (proto) {\n      Object.getOwnPropertyNames(proto)\n        .forEach(name => {\n          if (name !== 'constructor') {\n            if (this.__hasMethod(proto, name)) {\n              array.push(name)\n            }\n          }\n        })\n      proto = Object.getPrototypeOf(proto)\n    }\n    return array\n  }\n\n  /**\n   *\n   * @param {Object} obj\n   * @param {string} name\n   * @return {boolean}\n   * @private\n   */\n  __hasMethod(obj, name) {\n    const desc = Object.getOwnPropertyDescriptor(obj, name)\n    return !!desc && typeof desc.value === 'function'\n  }\n}\n\nmodule.exports = TestCaseExecutor\n"]}]}